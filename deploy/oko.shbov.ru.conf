server {
    server_name oko.shbov.ru;

    # API proxy location - must be more specific than the main location
    location ^~ /api/ {
        # Proxy requests to Flask API
        proxy_pass http://localhost:8083/;

        # Preserve original host
        proxy_set_header Host $host;

        # Forward client IP
        proxy_set_header X-Real-IP $remote_addr;

        # Forwarded for chain
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Forwarded protocol
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add Content-Type header
        add_header Content-Type application/json;
    }

    # Ping location block
    location /ping {
        # Proxy requests to Node.js ping endpoint
        proxy_pass http://localhost:3000/ping;

        # Preserve original host
        proxy_set_header Host $host;

        # Forward client IP
        proxy_set_header X-Real-IP $remote_addr;

        # Forwarded for chain
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Forwarded protocol
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main location block for all requests
    # Proxies requests to the Node.js application running in Docker
    location / {
        # Proxy requests to React UI
        proxy_pass http://localhost:3000;

        # Preserve original host
        proxy_set_header Host $host;

        # Forward client IP
        proxy_set_header X-Real-IP $remote_addr;

        # Forwarded for chain
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Forwarded protocol
        proxy_set_header X-Forwarded-Proto $scheme;

        # Fallback to index.html for SPA
        try_files $uri $uri/ /index.html;

        # Redirect off
        proxy_redirect off;
    }

    # Location block for static assets
    # Matches common static file extensions and caches them for 1 year
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Proxy static assets
        proxy_pass http://localhost:3000;

        # Bypass cache for upgrades
        proxy_cache_bypass $http_upgrade;

        # Cache static assets for 1 year
        expires 1y;

        # Cache control header
        add_header Cache-Control "public, no-transform";
    }

    # SSL configuration managed by Certbot
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/oko.shbov.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/oko.shbov.ru/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

# HTTP to HTTPS redirect server block
server {
    if ($host = oko.shbov.ru) {
        return 301 https://$host$request_uri;
    }

    listen 80;
    server_name oko.shbov.ru;

    return 404;
}
